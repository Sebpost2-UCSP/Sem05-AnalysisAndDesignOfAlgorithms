#include <iostream>
#include <vector>
#include <stdlib.h>

void print(std::vector<int> array) {
	int n = array.size();
	for (int i = 0; i < n; i++)
	{
		std::cout << " " << array[i];
	}
	std::cout << "\n";
}

std::vector<int> randgen(int n, std::vector<int> array) {
	for (int i = 0; i < n; i++) {
		array.push_back(rand());
	}
	return array;
}

void bubblesort(std::vector<int> &array) {
	int n = array.size();
	int aux=0;
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = 0; j < n - 1; j++)
		{
			if (array[j] > array[j + 1])
			{
				aux = array[j];
				array[j] = array[j + 1];
				array[j + 1] = aux;
			}
		}
	}
}

void selectsort(std::vector<int> &array) {
	int n = array.size();
	int aux = 0, cont = 0;
	int* min=NULL;
	for (int i = 0; i < n; i++)
	{
		min = &array[cont];
		for (int j = cont; j < n; j++)
		{
			if (*min > array[j])
			{
				min = &array[j];
			}
		}
		aux = *min;
		*min = array[cont];
		array[cont] = aux;
		cont++;
	}
}

void insertsort(std::vector<int> &array) {
	int aux = 0, cont = 0, n = array.size();
	int* min = NULL;
	std::vector<int> array2;
	for (int i = 0; i != n; n--)
	{
		min = &array[0];
		for (int j = 0; j < n; j++)
		{
			if (*min > array[j])
			{
				min = &array[j];
				aux = j;
			}
		}
		array2.push_back(*min);
		array.erase(array.begin() + aux);
		aux = 0;
	}
	array = array2;
}

int main() {

	clock_t startTime = clock();

	std::vector<int> example;
	example = randgen(1000, example);
	//JUST CHANGE THIS
	int n = 1;
	//JUST CHANGE THIS

	switch (n)
	{
	case 1:
		bubblesort(example);
		break;
	case 2:
		insertsort(example);
		break;
	case 3:
		selectsort(example);
		break;
	}

	std::cout << "\n SUCCESS\n"<< double(clock() - startTime) / (double)CLOCKS_PER_SEC << " seconds.";
}
